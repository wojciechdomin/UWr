let rec fib n = if n = 0 || n = 1 then 1 else fib (n-1) + fib (n-2);;
let fib_iter n = let rec fib_tr n f1 f2  = if n = 0 then f2  else fib_tr (n-1) (f1+f2) f1 in fib_tr n 1 1;;
let matrix_mult m n = let ( * ) (a,b) (c,d) = a*c+b*d and (a,b,c,d) = m and (e,f,g,h) = n in ((a,b)*(e,g),(a,b)*(f,h),(c,d)*(e,g),(c,d)*(f,h));; 
let matrix_id = (1,0,0,1);;
let rec matrix_expt m k = if k = 0 then matrix_id else matrix_mult m (matrix_expt m (k-1));;
let fib_matrix n = let (a,_,_,_) = (matrix_expt (1,1,1,0) n) in a;;
let rec matrix_expt_fast m n = if n = 0 then matrix_id else let a = matrix_expt_fast m (n/2) in if n mod 2 = 0 then matrix_mult a a else matrix_mult a (matrix_mult a m);;
let fib_fast n = let (a,_,_,_) = (matrix_expt_fast (1,1,1,0) n) in a;;
let rec mem x xs = match xs with | [] -> false | t :: h -> x = t || mem x h;;
let rec maximum xs = match xs with | [] -> neg_infinity | t :: h -> let a = maximum h in if t > a then t else a;; 
let rec suffixes xs = match xs with | [] -> []:: [] | t :: h -> xs :: (suffixes h);; 
let rec is_sorted xs  = match xs with | [] -> true | t1 :: [] -> true | t1 :: t2 :: h -> (t1 <= t2) && is_sorted (t2 :: h);; 
let select xs  = let rec min_tr xs n pos v = match xs with | [] -> (pos, v) | t :: h -> if t < v || pos = 0 then min_tr h (n+1) (n) t else min_tr h (n+1) pos v in let (p,v) = min_tr xs 1 0 0 in (v , let rec new_list xs n p = match xs with | [] -> [] | t :: h ->  if n = p then new_list h (n+1) p else t :: new_list h (n+1) p  in new_list xs 1 p );; 
let rec select_sort xs = match xs with | [] -> [] | h -> let (a,b) = select h in a :: (select_sort b);;
let split xs = let rec split2 xs n acc1 acc2 = match xs with | [] -> (acc1, acc2) | t :: h ->  if n = 0 then split2 h 1 (t::acc1) acc2 else split2 h 0  acc1 (t::acc2) in split2 xs 0 [] [];;  
let rec merge xs ys = match xs with | [] -> ys | t1 :: h1 -> (match ys with | [] -> xs | t2 :: h2 -> if t1 > t2 then t2::(merge xs h2) else t1::(merge h1 ys));; 
let rec merge_sort xs = match xs with | [] -> [] | t :: [] -> [t] | t -> let (a,b) = split t in merge (merge_sort a) (merge_sort b);; 
-------
let product xs = let rec product_tr xs acc = match xs with | [] -> acc | y :: ys -> product_tr ys (acc*y) in product_tr xs 1;;
let compose f g = (fun x -> f (g x));;
let build_list n f = let rec build n c f = if c = n then [] else f c :: build n (c+1) f in build n 0 f;; 
let negatives n = build_list n (fun x -> -x );; 
let reciprocals n = build_list n (fun x -> 1.0 /. float_of_int x);;
let evens n = build_list n (fun x -> 2*x);;
let identity_M n = build_list n (fun x -> let rec vec c n = if c = n then [] else (if c = x then 1 else 0 )::(vec (c+1) n) in vec 0 n);;
let empty_set x = false;;
let singleton a x = if a =x then true else false;;
let in_set a s = s a;;
let union s t x = ( s x) || (t x);;
let rec insert_bst x t = match t with | Leaf -> Node(Leaf,x,Leaf) | Node (l, v, r) -> if x < v then Node(insert_bst x l , v, r) else Node(l , v , insert_bst x r);; 
let rec fold_tree f a t =
  match t with
  | Leaf -> a
  | Node (l, v, r) -> f (fold_tree f a l) v (fold_tree f a r);;
let tree_product t = fold_tree (fun x y z -> x * y *z) 1 t;; 
let tree_flip t = fold_tree (fun x y z -> Node (z , y , x)) Leaf t;;
let tree_height t = fold_tree (fun x y z -> 1 + max x z) 0 t;;
let tree_span t = fold_tree (fun x y z -> match (x,z) with | (None, None) -> Some (y,y) | (None, Some (_,z1)) -> Some (y,z1) | (Some (x0,_),None) -> Some (x0,y) | (Some(x0,_),Some(_,z1)) -> Some (x0, z1)) None t;;
let flatten t = fold_tree (fun x y z -> x@[y]@z) [] t;;
let rec flat_append t xs = match t with | Leaf -> xs | Node(l,v,r) -> (flat_append l (v :: flat_append r xs));; 
let flatten2 t = flat_append t [];;
let rec insert_bst x t = match t with | Leaf -> Node(Leaf,x,Leaf) | Node (l, v, r) -> if x < v then Node(insert_bst x l , v, r) else Node(l , v , insert_bst x r);; 
let tree_sort xs = let rec build xs = match xs with | [] -> Leaf | y :: ys -> insert_bst y (build ys) in flatten (build xs);;
let rec min_el t = match t with | Leaf -> failwith "!" | Node (Leaf,v,r) -> (v,r) | Node(l,v,r) -> (let (u,t) = min_el l in (u , Node (t,v,r)) );; 
let next_el t = match t with | Leaf -> failwith "!" | Node (l, v, Leaf) -> None | Node (l,v,r) -> let (u,t) = min_el r in Some (u , Node (l,v,t));; 
let delete_root t = match t with | Leaf -> failwith "!" | Node(l,v,r) -> let u = next_el (Node(l,v,r)) in (match u with | None -> l | Some (u,Leaf) -> failwith "!" | Some(u,Node(l1,v1,r1)) -> Node(l1,u,r1));; 
let rec delete x t = match t with | Leaf -> failwith "!" | Node (l,v,r) -> if x > v then Node (l,v,(delete x r)) else (if x < v then Node ((delete x l),v,r) else delete_root (Node(l,v,r)) );;
---------------------------------------------
module ListDict = struct 
type ('a,'b) dict = Dict of ('a * 'b) list
let empty = Dict []
let insert key value old_dict = match old_dict with | Dict xs -> Dict ((key,value) :: xs)
let rec remove key old_dict = match old_dict with | Dict [] -> Dict [] | Dict ((a , b) :: xs) when key = a -> Dict xs | Dict ((a,b) :: xs) -> remove key (Dict xs)
let rec find key old_dict = match old_dict with | Dict [] -> failwith "!" | Dict ((a,b) :: xs) when a = key -> b | Dict((a,b) :: xs) -> find key (Dict xs)
let rec find_opt key old_dict = match old_dict with |(Dict []) -> None | Dict((a,b) :: xs) when a = key -> Some b | Dict((a,b) :: xs) -> find_opt key (Dict xs)
let to_list old_dict = match old_dict with | Dict xs -> xs
end;;  


module type KDICT = sig
type key
type 'b dict
val empty : 'b dict
val insert : key -> 'b -> 'b dict -> 'b  dict
val remove : key ->  'b  dict ->  'b  dict
val find_opt : key -> 'b dict -> 'b option
val find : key ->  'b  dict -> 'b
val to_list : 'b dict -> (key * 'b ) list
end

module MakeListDict (M : Map.OrderedType) = struct 
type key = M.t
type 'b dict = Dict of  (key*'b) list
let empty = Dict []
let insert key value old_dict = match old_dict with | Dict xs -> Dict ((key,value) :: xs)
let rec remove key old_dict = match old_dict with | Dict [] -> Dict [] | Dict ((a , b) :: xs) when key = a -> Dict xs | Dict ((a,b) :: xs) -> remove key (Dict xs)
let rec find key old_dict = match old_dict with | Dict [] -> failwith "!" | Dict ((a,b) :: xs) when a = key -> b | Dict((a,b) :: xs) -> find key (Dict xs)
let rec find_opt key old_dict = match old_dict with |(Dict []) -> None | Dict((a,b) :: xs) when a = key -> Some b | Dict((a,b) :: xs) -> find_opt key (Dict xs)
let to_list old_dict = match old_dict with | Dict xs -> xs
end;;  

module CharListDict : (KDICT with type key = char) = MakeListDict (struct type t = char;; let compare a b = Char.compare a b;;  end);;

module MakeMapDict (M : Map.OrderedType) = struct 
type key = M.t
module KeyMap = Map.Make(M)
type 'b dict = Dict of 'b KeyMap.t
let  empty = Dict KeyMap.empty
let insert key value old_dict = match old_dict with | Dict old_map -> Dict (KeyMap.add key value old_map)
let remove key old_dict =  match old_dict with | Dict old_map ->  Dict (KeyMap.remove key old_map)
let find key old_dict =   match old_dict with | Dict old_map -> KeyMap.find key old_map
let find_opt key old_dict =   match old_dict with | Dict old_map -> KeyMap.find_opt key old_map
let to_list old_dict = match old_dict with | Dict old_map -> KeyMap.bindings old_map
end;; 

module CharMapDict : (KDICT with type key = char) = MakeMapDict(Char);;

module Freq (D : KDICT) = struct
let freq (xs : D.key list) : (D.key * int) list = let rec build ys = match ys with | [] -> D.empty | y :: ys' -> let u = build ys' in (match (D.find_opt y u) with | None -> D.insert y 1 u | Some c -> D.remove y u |> D.insert y (c+1)) in D.to_list (build xs)
end;; 

module CharFreq = Freq (CharMapDict);;
let list_of_string s = String.to_seq s |> List.of_seq;;
let char_freq str = CharFreq.freq (list_of_string str);;


module LeftistHeap = struct
type ('a , 'b ) heap =
| HLeaf
| HNode of int * ('a , 'b ) heap * 'a * 'b * ('a , 'b ) heap
let rank = function HLeaf -> 0 | HNode (n , _ , _ , _ , _ ) -> n
let heap_ordered p = function
| HLeaf -> true
| HNode (_ , _ , p', _ , _ ) -> p <= p'
let rec is_valid = function
| HLeaf -> true
| HNode (n , l , p , v , r ) ->
rank r <= rank l
&& rank r + 1 = n
&& heap_ordered p l
&& heap_ordered p r
&& is_valid l
&& is_valid r
let make_node p v l r = if rank l >= rank r then HNode((1 + rank r), l , p, v, r) else HNode((1+rank l),r,p,v,l) 
end





